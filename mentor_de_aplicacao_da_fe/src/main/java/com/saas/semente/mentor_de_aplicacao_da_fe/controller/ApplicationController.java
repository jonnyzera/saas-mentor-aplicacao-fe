package com.saas.semente.mentor_de_aplicacao_da_fe.controller;

import com.saas.semente.mentor_de_aplicacao_da_fe.model.FaithApplication;
import com.saas.semente.mentor_de_aplicacao_da_fe.repository.FaithApplicationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.transaction.annotation.Transactional; // NOVA IMPORTA√á√ÉO

import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Controller
public class ApplicationController {

    @Autowired
    private FaithApplicationRepository repository;

    /**
     * Rota principal: /
     */
    @GetMapping("/")
    @Transactional(readOnly = true) // ADICIONADO: Corrige o erro de auto-commit do LOB
    public String index(Model model) {
        List<FaithApplication> applications = repository.findAllByOrderByCreatedAtDesc();
        model.addAttribute("applications", applications);
        return "index";
    }

    /**
     * Rota POST: /generate (N√£o precisa de @Transactional, pois @PostMapping √©
     * transacional por padr√£o)
     * INTEGRA√á√ÉO DA IA: Usa o desafio do usu√°rio para gerar a mentoria din√¢mica.
     */
    @PostMapping("/generate")
    public String generateMentorship(@RequestParam("userChallenge") String userChallenge, RedirectAttributes ra) {
        if (userChallenge.isBlank()) {
            ra.addFlashAttribute("errorMessage", "O Desafio do usu√°rio n√£o pode ser vazio.");
            return "redirect:/";
        }

        // --- CHAMADA √Ä IA SIMULADA ---
        FaithApplication newApp = generateAiMentorship(userChallenge);
        // --- FIM CHAMADA √Ä IA SIMULADA ---

        repository.save(newApp);
        ra.addFlashAttribute("successMessage", "Mentoria gerada e registrada com sucesso!");
        return "redirect:/";
    }

    /**
     * Rota: /dashboard
     */
    @GetMapping("/dashboard")
    @Transactional(readOnly = true) // ADICIONADO: Corrige o erro de auto-commit do LOB
    public String dashboard(Model model) {
        List<FaithApplication> allRecords = repository.findAll();

        // 1. C√°lculos para o Calend√°rio de H√°bito Di√°rio (dasboard.html)
        List<Integer> registrationDates = allRecords.stream()
                .map(app -> app.getCreatedAt().getDayOfMonth())
                .distinct()
                .collect(Collectors.toList());

        // Cria um Mapa de Registros por Dia (para o Modal de Detalhe Di√°rio)
        Map<Integer, List<FaithApplication>> recordsByDay = allRecords.stream()
                .collect(Collectors.groupingBy(app -> app.getCreatedAt().getDayOfMonth()));

        // 2. C√°lculos para a Composi√ß√£o dos Desafios (Gr√°fico ApexCharts)
        Map<String, Long> themeFrequency = allRecords.stream()
                .flatMap(app -> {
                    if (app.getIdentifiedTheme() != null) {
                        return List.of(app.getIdentifiedTheme().split(",")).stream()
                                .map(String::trim);
                    }
                    return null;
                })
                .filter(theme -> theme != null && !theme.isBlank())
                .collect(Collectors.groupingBy(theme -> theme, Collectors.counting()));

        // 3. Insight Reflexivo (Placeholder)
        String latestInsight = generateLatestInsight(themeFrequency);

        model.addAttribute("registrationDates", registrationDates);
        model.addAttribute("themeFrequency", themeFrequency);
        model.addAttribute("recordsByDay", recordsByDay);
        model.addAttribute("latestInsight", latestInsight);

        return "dasboard";
    }

    /**
     * Rota: /all-records
     */
    @GetMapping("/all-records")
    @Transactional(readOnly = true) // ADICIONADO: Corrige o erro de auto-commit do LOB
    public String allRecords(Model model) {
        List<FaithApplication> applications = repository.findAllByOrderByCreatedAtDesc();
        model.addAttribute("applications", applications);
        return "all-records";
    }

    /**
     * Rota DELETE: /delete/{id}
     */
    @DeleteMapping("/delete/{id}")
    public String deleteRecord(@PathVariable("id") Long id, RedirectAttributes ra) {
        if (repository.existsById(id)) {
            repository.deleteById(id);
            ra.addFlashAttribute("successMessage", "Registro exclu√≠do com sucesso!");
        } else {
            ra.addFlashAttribute("errorMessage", "Erro: Registro n√£o encontrado.");
        }
        return "redirect:/dashboard";
    }

    /**
     * [NOVO M√âTODO ESSENCIAL] Simula a chamada √† IA (Mentor Premium) para gerar a
     * mentoria.
     */
    private FaithApplication generateAiMentorship(String userChallenge) {
        FaithApplication app = new FaithApplication();
        app.setUserChallenge(userChallenge);

        String challenge = userChallenge.toLowerCase();

        String identifiedTheme;
        String versiculoBussola;
        String reflexaoAplicada;
        String planoDeAcao;
        String referenciasCruzadas;
        String oracaoSemente;

        if (challenge.contains("ansiedade") || challenge.contains("preocupado")
                || challenge.contains("sobrecarregado")) {
            identifiedTheme = "Ansiedade, Confian√ßa, Paz";
            versiculoBussola = "Filipenses 4:6-7";
            reflexaoAplicada = "A Palavra nos convida a lan√ßar toda a ansiedade sobre Ele, praticando a gratid√£o e a ora√ß√£o. A paz de Deus, que excede todo o entendimento, guardar√° o seu cora√ß√£o e a sua mente em Cristo Jesus. N√£o se prenda √†s preocupa√ß√µes; confie Nele.";
            planoDeAcao = "- Dedique 3 minutos para respirar fundo e listar 3 motivos de gratid√£o.\n- Divida suas tarefas sobrecarregantes em 3 passos menores.\n- Pratique a ora√ß√£o de entrega antes de come√ßar o trabalho.";
            referenciasCruzadas = "Mateus 6:34, 1 Pedro 5:7, Salmos 46:1";
            oracaoSemente = "Pai, eu Te entrego esta ansiedade. Que a Tua paz, que ultrapassa minha compreens√£o, me guarde hoje e me lembre de Tua soberania em todas as coisas. Am√©m.";
        } else if (challenge.contains("paci√™ncia") || challenge.contains("raiva") || challenge.contains("conflito")) {
            identifiedTheme = "Paci√™ncia, Amor, Autocontrole";
            versiculoBussola = "Ef√©sios 4:2";
            reflexaoAplicada = "Com toda a humildade e mansid√£o, com longanimidade, suportando-vos uns aos outros em amor. A paci√™ncia (longanimidade) √© um fruto do Esp√≠rito que se desenvolve na pr√°tica di√°ria de suportar as falhas dos outros, espelhando o amor de Cristo por n√≥s. Lembre-se de como Deus √© paciente com voc√™.";
            planoDeAcao = "- Quando a impaci√™ncia surgir, pause por 10 segundos antes de responder.\n- Identifique a real fonte da sua impaci√™ncia (cansa√ßo, estresse).\n- Pe√ßa a Deus o fruto do autocontrole antes de interagir com a pessoa desafiadora.";
            referenciasCruzadas = "Prov√©rbios 15:18, Colossenses 3:12-13, G√°latas 5:22-23";
            oracaoSemente = "Esp√≠rito Santo, encha-me de mansid√£o e longanimidade. Que minhas palavras e a√ß√µes edifiquem e demonstrem o Teu amor. Am√©m.";
        } else {
            // Default/Fallback para temas gen√©ricos
            identifiedTheme = "Foco, Dire√ß√£o, Sabedoria";
            versiculoBussola = "Prov√©rbios 3:5-6";
            reflexaoAplicada = "Confie no Senhor de todo o seu cora√ß√£o e n√£o se apoie no seu pr√≥prio entendimento. Reconhe√ßa-o em todos os seus caminhos, e Ele endireitar√° as suas veredas. A sabedoria come√ßa no temor ao Senhor e em buscar a Sua dire√ß√£o em vez da nossa pr√≥pria l√≥gica, submetendo todos os planos a Ele.";
            planoDeAcao = "- Comece o dia lendo um Salmo para centrar seu foco e prop√≥sito.\n- Fa√ßa uma lista de prioridades e se atenha a ela, eliminando distra√ß√µes.\n- Busque o conselho de um mentor ou l√≠der espiritual.";
            referenciasCruzadas = "Salmos 119:105, Tiago 1:5, 1 Cor√≠ntios 10:31";
            oracaoSemente = "Senhor, confio em Ti e n√£o em minha for√ßa. Mostra-me o caminho que devo seguir hoje e me d√™ a sabedoria necess√°ria para cada decis√£o. Am√©m.";
        }

        app.setIdentifiedTheme(identifiedTheme);
        app.setVersiculoBussola(versiculoBussola);
        app.setReflexaoAplicada(reflexaoAplicada);
        app.setPlanoDeAcao(planoDeAcao);
        app.setReferenciasCruzadas(referenciasCruzadas);
        app.setOracaoSemente(oracaoSemente);

        return app;
    }

    private String generateLatestInsight(Map<String, Long> themeFrequency) {
        if (themeFrequency.isEmpty()) {
            return "Parab√©ns! Voc√™ tem plantado sementes diariamente. Continue acompanhando seu Mapa de Crescimento. üå±";
        }

        String mainTheme = themeFrequency.entrySet().stream()
                .max(Map.Entry.comparingByValue())
                .map(Map.Entry::getKey)
                .orElse("Reflex√£o");

        long totalRecords = themeFrequency.values().stream().mapToLong(Long::longValue).sum();

        return String.format(
                "Voc√™ tem %d registros de aplica√ß√µes neste per√≠odo, e seu foco principal tem sido em **%s**. O Mentor sugere que voc√™ releia o Salmo 23 para encontrar descanso e dire√ß√£o. Continue a jornada!",
                totalRecords, mainTheme);
    }
}